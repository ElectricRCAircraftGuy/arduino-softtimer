#summary Detailed description of the provided features.

=Detailed description of the provided features=


==BlinkTask==


Every physical computing project starts with a blinking of a led.
You often need to have an indicator that shows the state of your program.

BlinkTask works in two mode:
 * Perpetual mode - Blinks forever.
 * Count mode - Blinks for an amount of occasion.

Perpetual mode has two kinds:
 * On-Off repetition - Repeat on and off states.
 * After a count of "on" times suspend for some time.

BlinkTask can work with on level of HIGH (default) or LOW.

Use start() function to register the task in the Timer Manager, so start blinking.

{{{
#include <SoftTimer.h>
#include <BlinkTask.h>

#define LED_PIN 13

// -- On for 200ms off for 100ms, repeat it 2 times, sleep for 2000 ms and than start again.
BlinkTask heartbeat(LED_PIN, 200, 100, 2, 2000);

void setup() {
  heartbeat.start();
}
}}}



==TonePlayer==


Tone player plays a melody on a specified output pin using the tone() and noTone() Arduino functions. You can specify the melody in quite tricky way, see the header file for details.

{{{
#include <SoftTimer.h>
#include <TonePlayer.h>

#define BEEPER_PIN  10

TonePlayer tonePlayer(BEEPER_PIN, 200); // -- Tone manager

void setup(void)
{
  tonePlayer.play("c1g1c1g1j2j2c1g1c1g1j2j2o1n1l1j1h2l2_2j1h1g1e1c2c2");
}
}}}




==SoftPwmTask==

With this task you can add PWM functionality for pins that did not have hardware PWM.

{{{
#include <SoftTimer.h>
#include <SoftPwmTask.h>

#define OUT_PIN  13

// -- Set up PWM to the out pin.
SoftPwmTask pwm(OUT_PIN);

void setup(void)
{
  // -- Register the task in the timer manager.
  SoftTimer.add(&pwm);
  
  // -- Writes a value of 128. That means output will "dimmed" half way. 
  pwm.analogWrite(128);
}
}}}




==Debouncer==


The debouncer task recommends to use the PciManager to manage the pin change interrupts. However you may handle interrupts manually.
After creating the debouncer task, you do not need to register it to the Timer Manager.
If you are using the PciManager, you only have to register the debouncer to the PciManager.
If you would like to handle PCI manually, you need make the pciHandleInterrupt() function to be called on pin change.
Debouncer will call your "onPressed" callback function when the button has a sable pressed state, and the "onReleased" on the end of the press. The "onReleased" callback also receive the total time passed on the pressing state.
You can use this debouncer both on Normally Opened and on Normally Closed circuits.

{{{
// -- Pin change interrupt
#include <PciManager.h>
#include <SoftTimer.h>
#include <Debouncer.h>

#define INPUT_PIN 3

Debouncer debouncer(INPUT_PIN, MODE_CLOSE_ON_PUSH, onPressed, onReleased);


void setup() {
  Serial.begin(9800);
  PciManager.registerListener(INPUT_PIN, &debouncer);
  Serial.println("Ready.");
}

void onPressed() {
  Serial.println("pressed");
}
void onReleased(unsigned long pressTimespan) {
  Serial.print(pressTimespan);
  Serial.println(" - released");
}
}}}





==Heartbeat==


Heartbeat is a special blinker. It is intended to use a visual indicator for your project more easy.
Heartbeat creates a custom timed BlinkTask and starts is immediately.